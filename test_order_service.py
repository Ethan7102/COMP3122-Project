import pytest
import requests
import json
import redis
import uuid
from datetime import datetime

pool = redis.ConnectionPool(host='localhost', port=6380, decode_responses=True)
db = redis.Redis(connection_pool=pool)

# get token
response = requests.post('http://localhost:5000/authentication/get_token', json={"username":"comp3122", "password": "comp3122"})
token = {"authorization": response.json()['token']}

#insert a default order
null=''
order = { "id": "f9f363d1-e1c2-4595-b477-c649845bc953", "display_id": "BC953", "external_reference_id": "Order-123", "current_state": "CREATED", "store": { "id": "c7f1dc2f-fabe-4997-845c-cad26fdcb894", "name": "Harry's Hamburgers", "external_reference_id": "HARRY_123" }, "eater": { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6ca78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" }, "eaters": [ { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" } ], "cart": { "items": [ { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "price": { "unit_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "total_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Choose-flavor", "title": "Choose flavor", "external_data": "External data for muffin flavor choice", "selected_items": [ { "id": "Chocolate-deluxe", "title": "Chocolate deluxe", "external_data": "External data for chocolate deluxe flavor", "quantity": 1, "price": { "unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" } }, "default_quantity": 0 } ], "removed_items": null } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" }, { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "special_instructions": "make it iced please", "quantity": 1, "price": { "unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Add-milk", "title": "Add milk", "external_data": "External data for milk choice", "selected_items": [ { "id": "Milk", "title": "Milk", "external_data": "External data for milk", "quantity": 1, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 0 } ], "removed_items": null }, { "id": "Add-sugar", "title": "Add sugar", "external_data": "External data for sugar choice", "selected_items": null, "removed_items": [ { "id": "Sugar", "title": "Sugar", "external_data": "External data for sugar", "quantity": 0, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 2 } ] } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" } ], "fulfillment_issues": [ { "fulfillment_issue_type": "OUT_OF_ITEM", "fulfillment_action_type": "REMOVE_ITEM", "root_item": { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 1, "items_available": 0 } }, { "fulfillment_issue_type": "PARTIAL_AVAILABILITY", "root_item": { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 2, "items_available": 1 } } ] }, "payment": { "charges": { "total": { "amount": 1399, "currency_code": "USD", "formatted_amount": "$13.99" }, "sub_total": { "amount": 650, "currency_code": "USD", "formatted_amount": "$6.50" }, "tax": { "amount": 52, "currency_code": "USD", "formatted_amount": "$0.52" }, "total_fee": { "amount": 697, "currency_code": "USD", "formatted_amount": "$6.97" } }, "accounting": { "taxRemittance": { "tax": { "uber": [ { "value": { "amount": 53, "currencyCode": "USD", "formattedAmount": "$0.53" } } ], "restaurant": null, "courier": null, "eater": null }, "totalFeeTax": null, "deliveryFeeTax": null, "smallOrderFeeTax": null } } }, "placed_at": "2019-05-14T15:16:54-05:00", "estimated_ready_for_pickup_at": "2019-05-14T15:36:54-05:00", "type": "DELIVERY_BY_UBER", "brand": "UBER_EATS", "deliveries": [ { "id": "65d700da-1e9d-41a7-a304-d0fdcd12b2e4", "first_name": "Bruce", "vehicle": { "make": "Uber", "model": "Bicycle", "license_plate": "BICYCLE" }, "picture_url": "https://www.example.com/picture_url", "estimated_pickup_time": "2019-05-14T15:38:45-05:00", "current_state": "ARRIVED_AT_PICKUP" } ] }
requests.post('http://localhost:5000/order', json=order, headers=token)

def test_handle_order():# test client placing an order
    order_id = str(uuid.uuid4())
    placed_at = datetime.now().isoformat()
    order = { "id": order_id, "display_id": "BC953", "external_reference_id": "Order-123", "current_state": "CREATED", "store": { "id": "c7f1dc2f-fabe-4997-845c-cad26fdcb894", "name": "Harry's Hamburgers", "external_reference_id": "HARRY_123" }, "eater": { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6ca78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" }, "eaters": [ { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" } ], "cart": { "items": [ { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "price": { "unit_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "total_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Choose-flavor", "title": "Choose flavor", "external_data": "External data for muffin flavor choice", "selected_items": [ { "id": "Chocolate-deluxe", "title": "Chocolate deluxe", "external_data": "External data for chocolate deluxe flavor", "quantity": 1, "price": { "unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" } }, "default_quantity": 0 } ], "removed_items": null } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" }, { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "special_instructions": "make it iced please", "quantity": 1, "price": { "unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Add-milk", "title": "Add milk", "external_data": "External data for milk choice", "selected_items": [ { "id": "Milk", "title": "Milk", "external_data": "External data for milk", "quantity": 1, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 0 } ], "removed_items": null }, { "id": "Add-sugar", "title": "Add sugar", "external_data": "External data for sugar choice", "selected_items": null, "removed_items": [ { "id": "Sugar", "title": "Sugar", "external_data": "External data for sugar", "quantity": 0, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 2 } ] } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" } ], "fulfillment_issues": [ { "fulfillment_issue_type": "OUT_OF_ITEM", "fulfillment_action_type": "REMOVE_ITEM", "root_item": { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 1, "items_available": 0 } }, { "fulfillment_issue_type": "PARTIAL_AVAILABILITY", "root_item": { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 2, "items_available": 1 } } ] }, "payment": { "charges": { "total": { "amount": 1399, "currency_code": "USD", "formatted_amount": "$13.99" }, "sub_total": { "amount": 650, "currency_code": "USD", "formatted_amount": "$6.50" }, "tax": { "amount": 52, "currency_code": "USD", "formatted_amount": "$0.52" }, "total_fee": { "amount": 697, "currency_code": "USD", "formatted_amount": "$6.97" } }, "accounting": { "taxRemittance": { "tax": { "uber": [ { "value": { "amount": 53, "currencyCode": "USD", "formattedAmount": "$0.53" } } ], "restaurant": null, "courier": null, "eater": null }, "totalFeeTax": null, "deliveryFeeTax": null, "smallOrderFeeTax": null } } }, "placed_at": placed_at, "estimated_ready_for_pickup_at": "2019-05-14T15:36:54-05:00", "type": "DELIVERY_BY_UBER", "brand": "UBER_EATS", "deliveries": [ { "id": "65d700da-1e9d-41a7-a304-d0fdcd12b2e4", "first_name": "Bruce", "vehicle": { "make": "Uber", "model": "Bicycle", "license_plate": "BICYCLE" }, "picture_url": "https://www.example.com/picture_url", "estimated_pickup_time": "2019-05-14T15:38:45-05:00", "current_state": "ARRIVED_AT_PICKUP" } ] }
    response = requests.post('http://localhost:5000/order', json=order, headers=token)
    assert response.status_code == 200

def test_handle_orders():# test client placing multiple orders
    order_id = []
    num_of_orders = 3
    for i in range(num_of_orders):
        order_id.append(str(uuid.uuid4()))
    for oid in order_id:
        placed_at = datetime.now().isoformat()
        order = { "id": oid, "display_id": "BC953", "external_reference_id": "Order-123", "current_state": "CREATED", "store": { "id": "c7f1dc2f-fabe-4997-845c-cad26fdcb894", "name": "Harry's Hamburgers", "external_reference_id": "HARRY_123" }, "eater": { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6ca78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" }, "eaters": [ { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" } ], "cart": { "items": [ { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "price": { "unit_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "total_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Choose-flavor", "title": "Choose flavor", "external_data": "External data for muffin flavor choice", "selected_items": [ { "id": "Chocolate-deluxe", "title": "Chocolate deluxe", "external_data": "External data for chocolate deluxe flavor", "quantity": 1, "price": { "unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" } }, "default_quantity": 0 } ], "removed_items": null } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" }, { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "special_instructions": "make it iced please", "quantity": 1, "price": { "unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Add-milk", "title": "Add milk", "external_data": "External data for milk choice", "selected_items": [ { "id": "Milk", "title": "Milk", "external_data": "External data for milk", "quantity": 1, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 0 } ], "removed_items": null }, { "id": "Add-sugar", "title": "Add sugar", "external_data": "External data for sugar choice", "selected_items": null, "removed_items": [ { "id": "Sugar", "title": "Sugar", "external_data": "External data for sugar", "quantity": 0, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 2 } ] } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" } ], "fulfillment_issues": [ { "fulfillment_issue_type": "OUT_OF_ITEM", "fulfillment_action_type": "REMOVE_ITEM", "root_item": { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 1, "items_available": 0 } }, { "fulfillment_issue_type": "PARTIAL_AVAILABILITY", "root_item": { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 2, "items_available": 1 } } ] }, "payment": { "charges": { "total": { "amount": 1399, "currency_code": "USD", "formatted_amount": "$13.99" }, "sub_total": { "amount": 650, "currency_code": "USD", "formatted_amount": "$6.50" }, "tax": { "amount": 52, "currency_code": "USD", "formatted_amount": "$0.52" }, "total_fee": { "amount": 697, "currency_code": "USD", "formatted_amount": "$6.97" } }, "accounting": { "taxRemittance": { "tax": { "uber": [ { "value": { "amount": 53, "currencyCode": "USD", "formattedAmount": "$0.53" } } ], "restaurant": null, "courier": null, "eater": null }, "totalFeeTax": null, "deliveryFeeTax": null, "smallOrderFeeTax": null } } }, "placed_at": placed_at, "estimated_ready_for_pickup_at": "2019-05-14T15:36:54-05:00", "type": "DELIVERY_BY_UBER", "brand": "UBER_EATS", "deliveries": [ { "id": "65d700da-1e9d-41a7-a304-d0fdcd12b2e4", "first_name": "Bruce", "vehicle": { "make": "Uber", "model": "Bicycle", "license_plate": "BICYCLE" }, "picture_url": "https://www.example.com/picture_url", "estimated_pickup_time": "2019-05-14T15:38:45-05:00", "current_state": "ARRIVED_AT_PICKUP" } ] }
        response = requests.post('http://localhost:5000/order', json=order, headers=token)
        assert response.status_code == 200

def test_handle_order_with_paused_store(): # test client placing an order to a paused store 
    #pause store 
    store_id = "7e973b58-40b7-4bd8-b01c-c7d1cbd194f6"
    newStatus = "PAUSED"
    reason = 'NA'
    response = requests.get("http://localhost:5000/store/" +store_id+ "/setStatus?newStatus="+newStatus+"&reason="+reason, headers=token)

    order_id = str(uuid.uuid4())
    placed_at = datetime.now().isoformat()
    order = { "id": order_id, "display_id": "BC953", "external_reference_id": "Order-123", "current_state": "CREATED", "store": { "id": store_id, "name": "Harry's Hamburgers", "external_reference_id": "HARRY_123" }, "eater": { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6ca78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" }, "eaters": [ { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" } ], "cart": { "items": [ { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "price": { "unit_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "total_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Choose-flavor", "title": "Choose flavor", "external_data": "External data for muffin flavor choice", "selected_items": [ { "id": "Chocolate-deluxe", "title": "Chocolate deluxe", "external_data": "External data for chocolate deluxe flavor", "quantity": 1, "price": { "unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" } }, "default_quantity": 0 } ], "removed_items": null } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" }, { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "special_instructions": "make it iced please", "quantity": 1, "price": { "unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Add-milk", "title": "Add milk", "external_data": "External data for milk choice", "selected_items": [ { "id": "Milk", "title": "Milk", "external_data": "External data for milk", "quantity": 1, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 0 } ], "removed_items": null }, { "id": "Add-sugar", "title": "Add sugar", "external_data": "External data for sugar choice", "selected_items": null, "removed_items": [ { "id": "Sugar", "title": "Sugar", "external_data": "External data for sugar", "quantity": 0, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 2 } ] } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" } ], "fulfillment_issues": [ { "fulfillment_issue_type": "OUT_OF_ITEM", "fulfillment_action_type": "REMOVE_ITEM", "root_item": { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 1, "items_available": 0 } }, { "fulfillment_issue_type": "PARTIAL_AVAILABILITY", "root_item": { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 2, "items_available": 1 } } ] }, "payment": { "charges": { "total": { "amount": 1399, "currency_code": "USD", "formatted_amount": "$13.99" }, "sub_total": { "amount": 650, "currency_code": "USD", "formatted_amount": "$6.50" }, "tax": { "amount": 52, "currency_code": "USD", "formatted_amount": "$0.52" }, "total_fee": { "amount": 697, "currency_code": "USD", "formatted_amount": "$6.97" } }, "accounting": { "taxRemittance": { "tax": { "uber": [ { "value": { "amount": 53, "currencyCode": "USD", "formattedAmount": "$0.53" } } ], "restaurant": null, "courier": null, "eater": null }, "totalFeeTax": null, "deliveryFeeTax": null, "smallOrderFeeTax": null } } }, "placed_at": placed_at, "estimated_ready_for_pickup_at": "2019-05-14T15:36:54-05:00", "type": "DELIVERY_BY_UBER", "brand": "UBER_EATS", "deliveries": [ { "id": "65d700da-1e9d-41a7-a304-d0fdcd12b2e4", "first_name": "Bruce", "vehicle": { "make": "Uber", "model": "Bicycle", "license_plate": "BICYCLE" }, "picture_url": "https://www.example.com/picture_url", "estimated_pickup_time": "2019-05-14T15:38:45-05:00", "current_state": "ARRIVED_AT_PICKUP" } ] }
    response = requests.post('http://localhost:5000/order', json=order, headers=token)
    assert response.status_code == 409

def test_handle_order_with_existent_order_id(): # test client placing an order with existent order_id
    order_id = "f9f363d1-e1c2-4595-b477-c649845bc953" #default order
    placed_at = datetime.now().isoformat()
    order = { "id": order_id, "display_id": "BC953", "external_reference_id": "Order-123", "current_state": "CREATED", "store": { "id": "c7f1dc2f-fabe-4997-845c-cad26fdcb894", "name": "Harry's Hamburgers", "external_reference_id": "HARRY_123" }, "eater": { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6ca78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" }, "eaters": [ { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" } ], "cart": { "items": [ { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "price": { "unit_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "total_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Choose-flavor", "title": "Choose flavor", "external_data": "External data for muffin flavor choice", "selected_items": [ { "id": "Chocolate-deluxe", "title": "Chocolate deluxe", "external_data": "External data for chocolate deluxe flavor", "quantity": 1, "price": { "unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" } }, "default_quantity": 0 } ], "removed_items": null } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" }, { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "special_instructions": "make it iced please", "quantity": 1, "price": { "unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Add-milk", "title": "Add milk", "external_data": "External data for milk choice", "selected_items": [ { "id": "Milk", "title": "Milk", "external_data": "External data for milk", "quantity": 1, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 0 } ], "removed_items": null }, { "id": "Add-sugar", "title": "Add sugar", "external_data": "External data for sugar choice", "selected_items": null, "removed_items": [ { "id": "Sugar", "title": "Sugar", "external_data": "External data for sugar", "quantity": 0, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 2 } ] } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" } ], "fulfillment_issues": [ { "fulfillment_issue_type": "OUT_OF_ITEM", "fulfillment_action_type": "REMOVE_ITEM", "root_item": { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 1, "items_available": 0 } }, { "fulfillment_issue_type": "PARTIAL_AVAILABILITY", "root_item": { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 2, "items_available": 1 } } ] }, "payment": { "charges": { "total": { "amount": 1399, "currency_code": "USD", "formatted_amount": "$13.99" }, "sub_total": { "amount": 650, "currency_code": "USD", "formatted_amount": "$6.50" }, "tax": { "amount": 52, "currency_code": "USD", "formatted_amount": "$0.52" }, "total_fee": { "amount": 697, "currency_code": "USD", "formatted_amount": "$6.97" } }, "accounting": { "taxRemittance": { "tax": { "uber": [ { "value": { "amount": 53, "currencyCode": "USD", "formattedAmount": "$0.53" } } ], "restaurant": null, "courier": null, "eater": null }, "totalFeeTax": null, "deliveryFeeTax": null, "smallOrderFeeTax": null } } }, "placed_at": placed_at, "estimated_ready_for_pickup_at": "2019-05-14T15:36:54-05:00", "type": "DELIVERY_BY_UBER", "brand": "UBER_EATS", "deliveries": [ { "id": "65d700da-1e9d-41a7-a304-d0fdcd12b2e4", "first_name": "Bruce", "vehicle": { "make": "Uber", "model": "Bicycle", "license_plate": "BICYCLE" }, "picture_url": "https://www.example.com/picture_url", "estimated_pickup_time": "2019-05-14T15:38:45-05:00", "current_state": "ARRIVED_AT_PICKUP" } ] }
    response = requests.post('http://localhost:5000/order', json=order, headers=token)
    assert response.status_code == 409
    assert response.json() == {'error': 'This order already exists'}

def test_get_order(): #test getting a specific order using a order_id
    order_id = "f9f363d1-e1c2-4595-b477-c649845bc953" #default order
    response = requests.get('http://localhost:5000/order/' + order_id, headers=token)
    assert response.status_code == 200
    assert response.json() == json.loads(db.hget("orders",order_id))

def test_get_order_with_incorrect_order_id(): #test getting a specific order using a incorrect order_id
    order_id = "XXXXX"
    response = requests.get('http://localhost:5000/order/' + order_id, headers=token)
    assert response.status_code == 404
    assert response.json() == {"error": "not found"}

def test_get_created_orders(): # test getting created orders using store_id
    store_id = "c7f1dc2f-fabe-4997-845c-cad26fdcb894" #default order
    response = requests.get("http://localhost:5000/stores/"+store_id+"/created-orders", headers=token)
    assert response.status_code == 200

def test_get_five_created_orders(): # test getting created orders with max number of 5 using store_id
    store_id = "c7f1dc2f-fabe-4997-845c-cad26fdcb894" #default order
    limit=5
    response = requests.get("http://localhost:5000/stores/"+store_id+"/created-orders?limit="+str(limit), headers=token)
    assert response.status_code == 200

def test_get_created_orders_returned_empty_result(): # the store does not have order with state "CREATED"
    store_id = str(uuid.uuid4())
    response = requests.get("http://localhost:5000/stores/"+store_id+"/created-orders", headers=token)
    assert response.status_code == 200
    assert response.json() == {"orders": []}

def test_get_canceled_orders(): # test getting canceled orders using store_id
    #place an order
    order_id = str(uuid.uuid4())
    placed_at = datetime.now().isoformat()
    store_id = str(uuid.uuid4())
    order = { "id": order_id, "display_id": "BC953", "external_reference_id": "Order-123", "current_state": "CREATED", "store": { "id": store_id, "name": "Harry's Hamburgers", "external_reference_id": "HARRY_123" }, "eater": { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6ca78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" }, "eaters": [ { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" } ], "cart": { "items": [ { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "price": { "unit_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "total_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Choose-flavor", "title": "Choose flavor", "external_data": "External data for muffin flavor choice", "selected_items": [ { "id": "Chocolate-deluxe", "title": "Chocolate deluxe", "external_data": "External data for chocolate deluxe flavor", "quantity": 1, "price": { "unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" } }, "default_quantity": 0 } ], "removed_items": null } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" }, { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "special_instructions": "make it iced please", "quantity": 1, "price": { "unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Add-milk", "title": "Add milk", "external_data": "External data for milk choice", "selected_items": [ { "id": "Milk", "title": "Milk", "external_data": "External data for milk", "quantity": 1, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 0 } ], "removed_items": null }, { "id": "Add-sugar", "title": "Add sugar", "external_data": "External data for sugar choice", "selected_items": null, "removed_items": [ { "id": "Sugar", "title": "Sugar", "external_data": "External data for sugar", "quantity": 0, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 2 } ] } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" } ], "fulfillment_issues": [ { "fulfillment_issue_type": "OUT_OF_ITEM", "fulfillment_action_type": "REMOVE_ITEM", "root_item": { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 1, "items_available": 0 } }, { "fulfillment_issue_type": "PARTIAL_AVAILABILITY", "root_item": { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 2, "items_available": 1 } } ] }, "payment": { "charges": { "total": { "amount": 1399, "currency_code": "USD", "formatted_amount": "$13.99" }, "sub_total": { "amount": 650, "currency_code": "USD", "formatted_amount": "$6.50" }, "tax": { "amount": 52, "currency_code": "USD", "formatted_amount": "$0.52" }, "total_fee": { "amount": 697, "currency_code": "USD", "formatted_amount": "$6.97" } }, "accounting": { "taxRemittance": { "tax": { "uber": [ { "value": { "amount": 53, "currencyCode": "USD", "formattedAmount": "$0.53" } } ], "restaurant": null, "courier": null, "eater": null }, "totalFeeTax": null, "deliveryFeeTax": null, "smallOrderFeeTax": null } } }, "placed_at": placed_at, "estimated_ready_for_pickup_at": "2019-05-14T15:36:54-05:00", "type": "DELIVERY_BY_UBER", "brand": "UBER_EATS", "deliveries": [ { "id": "65d700da-1e9d-41a7-a304-d0fdcd12b2e4", "first_name": "Bruce", "vehicle": { "make": "Uber", "model": "Bicycle", "license_plate": "BICYCLE" }, "picture_url": "https://www.example.com/picture_url", "estimated_pickup_time": "2019-05-14T15:38:45-05:00", "current_state": "ARRIVED_AT_PICKUP" } ] }
    requests.post('http://localhost:5000/order', json=order, headers=token)
    #canceled order
    requests.post('http://localhost:5000/orders/'+order_id+"/cancel", json={"reason":"CANNOT_COMPLETE_CUSTOMER_NOTE","details":"note is impossible"}, headers=token)
    #test
    response = requests.get("http://localhost:5000/stores/"+store_id+"/created-orders", headers=token)
    assert response.status_code == 200

def test_get_canceled_orders_returned_empty_result(): # the store does not have order with state "CANCELED"
    store_id = str(uuid.uuid4())
    response = requests.get("http://localhost:5000/stores/"+store_id+"/canceled-orders", headers=token)
    assert response.status_code == 200
    assert response.json() == {"orders": []}

def test_accept_order(): # test accepting an order
    #place an order
    order_id = str(uuid.uuid4())
    placed_at = datetime.now().isoformat()
    order = { "id": order_id, "display_id": "BC953", "external_reference_id": "Order-123", "current_state": "CREATED", "store": { "id": "c7f1dc2f-fabe-4997-845c-cad26fdcb894", "name": "Harry's Hamburgers", "external_reference_id": "HARRY_123" }, "eater": { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6ca78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" }, "eaters": [ { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" } ], "cart": { "items": [ { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "price": { "unit_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "total_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Choose-flavor", "title": "Choose flavor", "external_data": "External data for muffin flavor choice", "selected_items": [ { "id": "Chocolate-deluxe", "title": "Chocolate deluxe", "external_data": "External data for chocolate deluxe flavor", "quantity": 1, "price": { "unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" } }, "default_quantity": 0 } ], "removed_items": null } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" }, { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "special_instructions": "make it iced please", "quantity": 1, "price": { "unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Add-milk", "title": "Add milk", "external_data": "External data for milk choice", "selected_items": [ { "id": "Milk", "title": "Milk", "external_data": "External data for milk", "quantity": 1, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 0 } ], "removed_items": null }, { "id": "Add-sugar", "title": "Add sugar", "external_data": "External data for sugar choice", "selected_items": null, "removed_items": [ { "id": "Sugar", "title": "Sugar", "external_data": "External data for sugar", "quantity": 0, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 2 } ] } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" } ], "fulfillment_issues": [ { "fulfillment_issue_type": "OUT_OF_ITEM", "fulfillment_action_type": "REMOVE_ITEM", "root_item": { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 1, "items_available": 0 } }, { "fulfillment_issue_type": "PARTIAL_AVAILABILITY", "root_item": { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 2, "items_available": 1 } } ] }, "payment": { "charges": { "total": { "amount": 1399, "currency_code": "USD", "formatted_amount": "$13.99" }, "sub_total": { "amount": 650, "currency_code": "USD", "formatted_amount": "$6.50" }, "tax": { "amount": 52, "currency_code": "USD", "formatted_amount": "$0.52" }, "total_fee": { "amount": 697, "currency_code": "USD", "formatted_amount": "$6.97" } }, "accounting": { "taxRemittance": { "tax": { "uber": [ { "value": { "amount": 53, "currencyCode": "USD", "formattedAmount": "$0.53" } } ], "restaurant": null, "courier": null, "eater": null }, "totalFeeTax": null, "deliveryFeeTax": null, "smallOrderFeeTax": null } } }, "placed_at": placed_at, "estimated_ready_for_pickup_at": "2019-05-14T15:36:54-05:00", "type": "DELIVERY_BY_UBER", "brand": "UBER_EATS", "deliveries": [ { "id": "65d700da-1e9d-41a7-a304-d0fdcd12b2e4", "first_name": "Bruce", "vehicle": { "make": "Uber", "model": "Bicycle", "license_plate": "BICYCLE" }, "picture_url": "https://www.example.com/picture_url", "estimated_pickup_time": "2019-05-14T15:38:45-05:00", "current_state": "ARRIVED_AT_PICKUP" } ] }
    requests.post('http://localhost:5000/order', json=order, headers=token)
    #test
    response = requests.post("http://localhost:5000/orders/"+order_id+"/accept_pos_order", json={"reason": "accepted"}, headers=token)
    assert response.status_code == 204

def test_accept_order_with_nonexistent_order_id(): # test accepting an order using a nonexistent order_id
    order_id = "XXXXX"
    response = requests.post("http://localhost:5000/orders/"+order_id+"/accept_pos_order", json={"reason": "accepted"}, headers=token)
    assert response.status_code == 404
    assert response.json() == {"error": "not found"}

def test_accept_order_with_incorrect_state(): # test accepting an order that the state is not "CREATED" or "DENIED"
    #place an order
    order_id = str(uuid.uuid4())
    placed_at = datetime.now().isoformat()
    order = { "id": order_id, "display_id": "BC953", "external_reference_id": "Order-123", "current_state": "CREATED", "store": { "id": "c7f1dc2f-fabe-4997-845c-cad26fdcb894", "name": "Harry's Hamburgers", "external_reference_id": "HARRY_123" }, "eater": { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6ca78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" }, "eaters": [ { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" } ], "cart": { "items": [ { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "price": { "unit_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "total_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Choose-flavor", "title": "Choose flavor", "external_data": "External data for muffin flavor choice", "selected_items": [ { "id": "Chocolate-deluxe", "title": "Chocolate deluxe", "external_data": "External data for chocolate deluxe flavor", "quantity": 1, "price": { "unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" } }, "default_quantity": 0 } ], "removed_items": null } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" }, { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "special_instructions": "make it iced please", "quantity": 1, "price": { "unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Add-milk", "title": "Add milk", "external_data": "External data for milk choice", "selected_items": [ { "id": "Milk", "title": "Milk", "external_data": "External data for milk", "quantity": 1, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 0 } ], "removed_items": null }, { "id": "Add-sugar", "title": "Add sugar", "external_data": "External data for sugar choice", "selected_items": null, "removed_items": [ { "id": "Sugar", "title": "Sugar", "external_data": "External data for sugar", "quantity": 0, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 2 } ] } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" } ], "fulfillment_issues": [ { "fulfillment_issue_type": "OUT_OF_ITEM", "fulfillment_action_type": "REMOVE_ITEM", "root_item": { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 1, "items_available": 0 } }, { "fulfillment_issue_type": "PARTIAL_AVAILABILITY", "root_item": { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 2, "items_available": 1 } } ] }, "payment": { "charges": { "total": { "amount": 1399, "currency_code": "USD", "formatted_amount": "$13.99" }, "sub_total": { "amount": 650, "currency_code": "USD", "formatted_amount": "$6.50" }, "tax": { "amount": 52, "currency_code": "USD", "formatted_amount": "$0.52" }, "total_fee": { "amount": 697, "currency_code": "USD", "formatted_amount": "$6.97" } }, "accounting": { "taxRemittance": { "tax": { "uber": [ { "value": { "amount": 53, "currencyCode": "USD", "formattedAmount": "$0.53" } } ], "restaurant": null, "courier": null, "eater": null }, "totalFeeTax": null, "deliveryFeeTax": null, "smallOrderFeeTax": null } } }, "placed_at": placed_at, "estimated_ready_for_pickup_at": "2019-05-14T15:36:54-05:00", "type": "DELIVERY_BY_UBER", "brand": "UBER_EATS", "deliveries": [ { "id": "65d700da-1e9d-41a7-a304-d0fdcd12b2e4", "first_name": "Bruce", "vehicle": { "make": "Uber", "model": "Bicycle", "license_plate": "BICYCLE" }, "picture_url": "https://www.example.com/picture_url", "estimated_pickup_time": "2019-05-14T15:38:45-05:00", "current_state": "ARRIVED_AT_PICKUP" } ] }
    requests.post('http://localhost:5000/order', json=order, headers=token)
    #canceled order
    requests.post('http://localhost:5000/orders/'+order_id+"/cancel",json={"reason":"CANNOT_COMPLETE_CUSTOMER_NOTE","details":"note is impossible"}, headers=token)
    #test
    response = requests.post("http://localhost:5000/orders/"+order_id+"/accept_pos_order", json={"reason": "accepted"}, headers=token)
    assert response.status_code == 409

def test_deny_order(): # test denying an order
    #place an order
    order_id = str(uuid.uuid4())
    placed_at = datetime.now().isoformat()
    order = { "id": order_id, "display_id": "BC953", "external_reference_id": "Order-123", "current_state": "CREATED", "store": { "id": "c7f1dc2f-fabe-4997-845c-cad26fdcb894", "name": "Harry's Hamburgers", "external_reference_id": "HARRY_123" }, "eater": { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6ca78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" }, "eaters": [ { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" } ], "cart": { "items": [ { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "price": { "unit_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "total_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Choose-flavor", "title": "Choose flavor", "external_data": "External data for muffin flavor choice", "selected_items": [ { "id": "Chocolate-deluxe", "title": "Chocolate deluxe", "external_data": "External data for chocolate deluxe flavor", "quantity": 1, "price": { "unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" } }, "default_quantity": 0 } ], "removed_items": null } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" }, { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "special_instructions": "make it iced please", "quantity": 1, "price": { "unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Add-milk", "title": "Add milk", "external_data": "External data for milk choice", "selected_items": [ { "id": "Milk", "title": "Milk", "external_data": "External data for milk", "quantity": 1, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 0 } ], "removed_items": null }, { "id": "Add-sugar", "title": "Add sugar", "external_data": "External data for sugar choice", "selected_items": null, "removed_items": [ { "id": "Sugar", "title": "Sugar", "external_data": "External data for sugar", "quantity": 0, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 2 } ] } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" } ], "fulfillment_issues": [ { "fulfillment_issue_type": "OUT_OF_ITEM", "fulfillment_action_type": "REMOVE_ITEM", "root_item": { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 1, "items_available": 0 } }, { "fulfillment_issue_type": "PARTIAL_AVAILABILITY", "root_item": { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 2, "items_available": 1 } } ] }, "payment": { "charges": { "total": { "amount": 1399, "currency_code": "USD", "formatted_amount": "$13.99" }, "sub_total": { "amount": 650, "currency_code": "USD", "formatted_amount": "$6.50" }, "tax": { "amount": 52, "currency_code": "USD", "formatted_amount": "$0.52" }, "total_fee": { "amount": 697, "currency_code": "USD", "formatted_amount": "$6.97" } }, "accounting": { "taxRemittance": { "tax": { "uber": [ { "value": { "amount": 53, "currencyCode": "USD", "formattedAmount": "$0.53" } } ], "restaurant": null, "courier": null, "eater": null }, "totalFeeTax": null, "deliveryFeeTax": null, "smallOrderFeeTax": null } } }, "placed_at": placed_at, "estimated_ready_for_pickup_at": "2019-05-14T15:36:54-05:00", "type": "DELIVERY_BY_UBER", "brand": "UBER_EATS", "deliveries": [ { "id": "65d700da-1e9d-41a7-a304-d0fdcd12b2e4", "first_name": "Bruce", "vehicle": { "make": "Uber", "model": "Bicycle", "license_plate": "BICYCLE" }, "picture_url": "https://www.example.com/picture_url", "estimated_pickup_time": "2019-05-14T15:38:45-05:00", "current_state": "ARRIVED_AT_PICKUP" } ] }
    requests.post('http://localhost:5000/order', json=order, headers=token)
    #test
    response = requests.post("http://localhost:5000/orders/"+order_id+"/deny_pos_order", json={ "reason": { "explanation":"failed to submit order", "code":"ITEM_AVAILABILITY", "out_of_stock_items":[ "540cb880-0286-417b-9c6c-be586fd50f76", "094f3308-4389-4ce5-bf30-ce9e09c6ed1c" ], "invalid_items":[ "1cd26db9-6be3-4b0a-9216-e4868c5d79ec" ] } }, headers=token)
    assert response.status_code == 204

def test_deny_order_with_nonexistent_order_id(): # test denying an order using a nonexistent order_id
    order_id = "XXXXX"
    response = requests.post("http://localhost:5000/orders/"+order_id+"/deny_pos_order", json={ "reason": { "explanation":"failed to submit order", "code":"ITEM_AVAILABILITY", "out_of_stock_items":[ "540cb880-0286-417b-9c6c-be586fd50f76", "094f3308-4389-4ce5-bf30-ce9e09c6ed1c" ], "invalid_items":[ "1cd26db9-6be3-4b0a-9216-e4868c5d79ec" ] } }, headers=token)
    assert response.status_code == 404
    assert response.json() == {"error": "not found"}

def test_deny_order_with_incorrect_state(): # test denying an order that the state is not "CREATED" or "ACCEPTED"
    #place an order
    order_id = str(uuid.uuid4())
    placed_at = datetime.now().isoformat()
    order = { "id": order_id, "display_id": "BC953", "external_reference_id": "Order-123", "current_state": "CREATED", "store": { "id": "c7f1dc2f-fabe-4997-845c-cad26fdcb894", "name": "Harry's Hamburgers", "external_reference_id": "HARRY_123" }, "eater": { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6ca78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" }, "eaters": [ { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" } ], "cart": { "items": [ { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "price": { "unit_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "total_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Choose-flavor", "title": "Choose flavor", "external_data": "External data for muffin flavor choice", "selected_items": [ { "id": "Chocolate-deluxe", "title": "Chocolate deluxe", "external_data": "External data for chocolate deluxe flavor", "quantity": 1, "price": { "unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" } }, "default_quantity": 0 } ], "removed_items": null } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" }, { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "special_instructions": "make it iced please", "quantity": 1, "price": { "unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Add-milk", "title": "Add milk", "external_data": "External data for milk choice", "selected_items": [ { "id": "Milk", "title": "Milk", "external_data": "External data for milk", "quantity": 1, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 0 } ], "removed_items": null }, { "id": "Add-sugar", "title": "Add sugar", "external_data": "External data for sugar choice", "selected_items": null, "removed_items": [ { "id": "Sugar", "title": "Sugar", "external_data": "External data for sugar", "quantity": 0, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 2 } ] } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" } ], "fulfillment_issues": [ { "fulfillment_issue_type": "OUT_OF_ITEM", "fulfillment_action_type": "REMOVE_ITEM", "root_item": { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 1, "items_available": 0 } }, { "fulfillment_issue_type": "PARTIAL_AVAILABILITY", "root_item": { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 2, "items_available": 1 } } ] }, "payment": { "charges": { "total": { "amount": 1399, "currency_code": "USD", "formatted_amount": "$13.99" }, "sub_total": { "amount": 650, "currency_code": "USD", "formatted_amount": "$6.50" }, "tax": { "amount": 52, "currency_code": "USD", "formatted_amount": "$0.52" }, "total_fee": { "amount": 697, "currency_code": "USD", "formatted_amount": "$6.97" } }, "accounting": { "taxRemittance": { "tax": { "uber": [ { "value": { "amount": 53, "currencyCode": "USD", "formattedAmount": "$0.53" } } ], "restaurant": null, "courier": null, "eater": null }, "totalFeeTax": null, "deliveryFeeTax": null, "smallOrderFeeTax": null } } }, "placed_at": placed_at, "estimated_ready_for_pickup_at": "2019-05-14T15:36:54-05:00", "type": "DELIVERY_BY_UBER", "brand": "UBER_EATS", "deliveries": [ { "id": "65d700da-1e9d-41a7-a304-d0fdcd12b2e4", "first_name": "Bruce", "vehicle": { "make": "Uber", "model": "Bicycle", "license_plate": "BICYCLE" }, "picture_url": "https://www.example.com/picture_url", "estimated_pickup_time": "2019-05-14T15:38:45-05:00", "current_state": "ARRIVED_AT_PICKUP" } ] }
    requests.post('http://localhost:5000/order', json=order, headers=token)
    #canceled order
    requests.post('http://localhost:5000/orders/'+order_id+"/cancel",json={"reason":"CANNOT_COMPLETE_CUSTOMER_NOTE","details":"note is impossible"}, headers=token)
    #test
    response = requests.post("http://localhost:5000/orders/"+order_id+"/deny_pos_order", json={ "reason": { "explanation":"failed to submit order", "code":"ITEM_AVAILABILITY", "out_of_stock_items":[ "540cb880-0286-417b-9c6c-be586fd50f76", "094f3308-4389-4ce5-bf30-ce9e09c6ed1c" ], "invalid_items":[ "1cd26db9-6be3-4b0a-9216-e4868c5d79ec" ] } }, headers=token)
    assert response.status_code == 409

def test_cancel_order(): # test cancelling an order
    #place an order
    order_id = str(uuid.uuid4())
    placed_at = datetime.now().isoformat()
    order = { "id": order_id, "display_id": "BC953", "external_reference_id": "Order-123", "current_state": "CREATED", "store": { "id": "c7f1dc2f-fabe-4997-845c-cad26fdcb894", "name": "Harry's Hamburgers", "external_reference_id": "HARRY_123" }, "eater": { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6ca78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" }, "eaters": [ { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" } ], "cart": { "items": [ { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "price": { "unit_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "total_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Choose-flavor", "title": "Choose flavor", "external_data": "External data for muffin flavor choice", "selected_items": [ { "id": "Chocolate-deluxe", "title": "Chocolate deluxe", "external_data": "External data for chocolate deluxe flavor", "quantity": 1, "price": { "unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" } }, "default_quantity": 0 } ], "removed_items": null } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" }, { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "special_instructions": "make it iced please", "quantity": 1, "price": { "unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Add-milk", "title": "Add milk", "external_data": "External data for milk choice", "selected_items": [ { "id": "Milk", "title": "Milk", "external_data": "External data for milk", "quantity": 1, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 0 } ], "removed_items": null }, { "id": "Add-sugar", "title": "Add sugar", "external_data": "External data for sugar choice", "selected_items": null, "removed_items": [ { "id": "Sugar", "title": "Sugar", "external_data": "External data for sugar", "quantity": 0, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 2 } ] } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" } ], "fulfillment_issues": [ { "fulfillment_issue_type": "OUT_OF_ITEM", "fulfillment_action_type": "REMOVE_ITEM", "root_item": { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 1, "items_available": 0 } }, { "fulfillment_issue_type": "PARTIAL_AVAILABILITY", "root_item": { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 2, "items_available": 1 } } ] }, "payment": { "charges": { "total": { "amount": 1399, "currency_code": "USD", "formatted_amount": "$13.99" }, "sub_total": { "amount": 650, "currency_code": "USD", "formatted_amount": "$6.50" }, "tax": { "amount": 52, "currency_code": "USD", "formatted_amount": "$0.52" }, "total_fee": { "amount": 697, "currency_code": "USD", "formatted_amount": "$6.97" } }, "accounting": { "taxRemittance": { "tax": { "uber": [ { "value": { "amount": 53, "currencyCode": "USD", "formattedAmount": "$0.53" } } ], "restaurant": null, "courier": null, "eater": null }, "totalFeeTax": null, "deliveryFeeTax": null, "smallOrderFeeTax": null } } }, "placed_at": placed_at, "estimated_ready_for_pickup_at": "2019-05-14T15:36:54-05:00", "type": "DELIVERY_BY_UBER", "brand": "UBER_EATS", "deliveries": [ { "id": "65d700da-1e9d-41a7-a304-d0fdcd12b2e4", "first_name": "Bruce", "vehicle": { "make": "Uber", "model": "Bicycle", "license_plate": "BICYCLE" }, "picture_url": "https://www.example.com/picture_url", "estimated_pickup_time": "2019-05-14T15:38:45-05:00", "current_state": "ARRIVED_AT_PICKUP" } ] }
    requests.post('http://localhost:5000/order', json=order, headers=token)
    #test
    response = requests.post("http://localhost:5000/orders/"+order_id+"/cancel", json={"reason":"CANNOT_COMPLETE_CUSTOMER_NOTE","details":"note is impossible"}, headers=token)
    assert response.status_code == 204

def test_cancel_order_with_nonexistent_order_id(): # test cancelling an order using a nonexistent order_id
    order_id = "XXXXX"
    response = requests.post("http://localhost:5000/orders/"+order_id+"/cancel", json={"reason":"CANNOT_COMPLETE_CUSTOMER_NOTE","details":"note is impossible"}, headers=token)
    assert response.status_code == 404
    assert response.json() == {"error": "not found"}

def test_cancel_order_with_incorrect_state(): # test cancelling an order that the state is not "CREATED" or "ACCEPTED"
    #place an order
    order_id = str(uuid.uuid4())
    placed_at = datetime.now().isoformat()
    order = { "id": order_id, "display_id": "BC953", "external_reference_id": "Order-123", "current_state": "CREATED", "store": { "id": "c7f1dc2f-fabe-4997-845c-cad26fdcb894", "name": "Harry's Hamburgers", "external_reference_id": "HARRY_123" }, "eater": { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6ca78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" }, "eaters": [ { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" } ], "cart": { "items": [ { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "price": { "unit_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "total_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Choose-flavor", "title": "Choose flavor", "external_data": "External data for muffin flavor choice", "selected_items": [ { "id": "Chocolate-deluxe", "title": "Chocolate deluxe", "external_data": "External data for chocolate deluxe flavor", "quantity": 1, "price": { "unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" } }, "default_quantity": 0 } ], "removed_items": null } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" }, { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "special_instructions": "make it iced please", "quantity": 1, "price": { "unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Add-milk", "title": "Add milk", "external_data": "External data for milk choice", "selected_items": [ { "id": "Milk", "title": "Milk", "external_data": "External data for milk", "quantity": 1, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 0 } ], "removed_items": null }, { "id": "Add-sugar", "title": "Add sugar", "external_data": "External data for sugar choice", "selected_items": null, "removed_items": [ { "id": "Sugar", "title": "Sugar", "external_data": "External data for sugar", "quantity": 0, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 2 } ] } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" } ], "fulfillment_issues": [ { "fulfillment_issue_type": "OUT_OF_ITEM", "fulfillment_action_type": "REMOVE_ITEM", "root_item": { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 1, "items_available": 0 } }, { "fulfillment_issue_type": "PARTIAL_AVAILABILITY", "root_item": { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 2, "items_available": 1 } } ] }, "payment": { "charges": { "total": { "amount": 1399, "currency_code": "USD", "formatted_amount": "$13.99" }, "sub_total": { "amount": 650, "currency_code": "USD", "formatted_amount": "$6.50" }, "tax": { "amount": 52, "currency_code": "USD", "formatted_amount": "$0.52" }, "total_fee": { "amount": 697, "currency_code": "USD", "formatted_amount": "$6.97" } }, "accounting": { "taxRemittance": { "tax": { "uber": [ { "value": { "amount": 53, "currencyCode": "USD", "formattedAmount": "$0.53" } } ], "restaurant": null, "courier": null, "eater": null }, "totalFeeTax": null, "deliveryFeeTax": null, "smallOrderFeeTax": null } } }, "placed_at": placed_at, "estimated_ready_for_pickup_at": "2019-05-14T15:36:54-05:00", "type": "DELIVERY_BY_UBER", "brand": "UBER_EATS", "deliveries": [ { "id": "65d700da-1e9d-41a7-a304-d0fdcd12b2e4", "first_name": "Bruce", "vehicle": { "make": "Uber", "model": "Bicycle", "license_plate": "BICYCLE" }, "picture_url": "https://www.example.com/picture_url", "estimated_pickup_time": "2019-05-14T15:38:45-05:00", "current_state": "ARRIVED_AT_PICKUP" } ] }
    requests.post('http://localhost:5000/order', json=order, headers=token)
    #deny order
    requests.post("http://localhost:5000/orders/"+order_id+"/deny_pos_order", json={ "reason": { "explanation":"failed to submit order", "code":"ITEM_AVAILABILITY", "out_of_stock_items":[ "540cb880-0286-417b-9c6c-be586fd50f76", "094f3308-4389-4ce5-bf30-ce9e09c6ed1c" ], "invalid_items":[ "1cd26db9-6be3-4b0a-9216-e4868c5d79ec" ] } }, headers=token)
    #test
    response = requests.post("http://localhost:5000/orders/"+order_id+"/deny_pos_order", json={ "reason": { "explanation":"failed to submit order", "code":"ITEM_AVAILABILITY", "out_of_stock_items":[ "540cb880-0286-417b-9c6c-be586fd50f76", "094f3308-4389-4ce5-bf30-ce9e09c6ed1c" ], "invalid_items":[ "1cd26db9-6be3-4b0a-9216-e4868c5d79ec" ] } }, headers=token)
    assert response.status_code == 409

def test_update_delivery_status(): # testing updating delivery status of an order using order_id
    #place an order
    order_id = str(uuid.uuid4())
    placed_at = datetime.now().isoformat()
    order = { "id": order_id, "display_id": "BC953", "external_reference_id": "Order-123", "current_state": "CREATED", "store": { "id": "c7f1dc2f-fabe-4997-845c-cad26fdcb894", "name": "Harry's Hamburgers", "external_reference_id": "HARRY_123" }, "eater": { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6ca78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" }, "eaters": [ { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" } ], "cart": { "items": [ { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "price": { "unit_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "total_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Choose-flavor", "title": "Choose flavor", "external_data": "External data for muffin flavor choice", "selected_items": [ { "id": "Chocolate-deluxe", "title": "Chocolate deluxe", "external_data": "External data for chocolate deluxe flavor", "quantity": 1, "price": { "unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" } }, "default_quantity": 0 } ], "removed_items": null } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" }, { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "special_instructions": "make it iced please", "quantity": 1, "price": { "unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Add-milk", "title": "Add milk", "external_data": "External data for milk choice", "selected_items": [ { "id": "Milk", "title": "Milk", "external_data": "External data for milk", "quantity": 1, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 0 } ], "removed_items": null }, { "id": "Add-sugar", "title": "Add sugar", "external_data": "External data for sugar choice", "selected_items": null, "removed_items": [ { "id": "Sugar", "title": "Sugar", "external_data": "External data for sugar", "quantity": 0, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 2 } ] } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" } ], "fulfillment_issues": [ { "fulfillment_issue_type": "OUT_OF_ITEM", "fulfillment_action_type": "REMOVE_ITEM", "root_item": { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 1, "items_available": 0 } }, { "fulfillment_issue_type": "PARTIAL_AVAILABILITY", "root_item": { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 2, "items_available": 1 } } ] }, "payment": { "charges": { "total": { "amount": 1399, "currency_code": "USD", "formatted_amount": "$13.99" }, "sub_total": { "amount": 650, "currency_code": "USD", "formatted_amount": "$6.50" }, "tax": { "amount": 52, "currency_code": "USD", "formatted_amount": "$0.52" }, "total_fee": { "amount": 697, "currency_code": "USD", "formatted_amount": "$6.97" } }, "accounting": { "taxRemittance": { "tax": { "uber": [ { "value": { "amount": 53, "currencyCode": "USD", "formattedAmount": "$0.53" } } ], "restaurant": null, "courier": null, "eater": null }, "totalFeeTax": null, "deliveryFeeTax": null, "smallOrderFeeTax": null } } }, "placed_at": placed_at, "estimated_ready_for_pickup_at": "2019-05-14T15:36:54-05:00", "type": "DELIVERY_BY_UBER", "brand": "UBER_EATS", "deliveries": [ { "id": "65d700da-1e9d-41a7-a304-d0fdcd12b2e4", "first_name": "Bruce", "vehicle": { "make": "Uber", "model": "Bicycle", "license_plate": "BICYCLE" }, "picture_url": "https://www.example.com/picture_url", "estimated_pickup_time": "2019-05-14T15:38:45-05:00", "current_state": "ARRIVED_AT_PICKUP" } ] }
    requests.post('http://localhost:5000/order', json=order, headers=token)
    #accept order
    requests.post("http://localhost:5000/orders/"+order_id+"/accept_pos_order", json={"reason": "accepted"}, headers=token)
    #test
    response = requests.post("http://localhost:5000/orders/"+order_id+"/restaurantdelivery/status", json={"status": "delivered"}, headers=token)
    assert response.status_code == 204

def test_update_delivery_status_with_nonexistent_order_id(): # testing updating delivery status of an order using a nonexistent order_id
    order_id = "XXXXX"
    #test
    response = requests.post("http://localhost:5000/orders/"+order_id+"/restaurantdelivery/status", json={"status": "delivered"}, headers=token)
    assert response.status_code == 404
    assert response.json() == {"error": "not found"}

def test_update_delivery_status_with_incorrect_state(): # testing updating delivery status of an order that the order state is "CREATED"
    #place an order
    order_id = str(uuid.uuid4())
    placed_at = datetime.now().isoformat()
    order = { "id": order_id, "display_id": "BC953", "external_reference_id": "Order-123", "current_state": "CREATED", "store": { "id": "c7f1dc2f-fabe-4997-845c-cad26fdcb894", "name": "Harry's Hamburgers", "external_reference_id": "HARRY_123" }, "eater": { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6ca78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" }, "eaters": [ { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" } ], "cart": { "items": [ { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "price": { "unit_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "total_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Choose-flavor", "title": "Choose flavor", "external_data": "External data for muffin flavor choice", "selected_items": [ { "id": "Chocolate-deluxe", "title": "Chocolate deluxe", "external_data": "External data for chocolate deluxe flavor", "quantity": 1, "price": { "unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" } }, "default_quantity": 0 } ], "removed_items": null } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" }, { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "special_instructions": "make it iced please", "quantity": 1, "price": { "unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Add-milk", "title": "Add milk", "external_data": "External data for milk choice", "selected_items": [ { "id": "Milk", "title": "Milk", "external_data": "External data for milk", "quantity": 1, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 0 } ], "removed_items": null }, { "id": "Add-sugar", "title": "Add sugar", "external_data": "External data for sugar choice", "selected_items": null, "removed_items": [ { "id": "Sugar", "title": "Sugar", "external_data": "External data for sugar", "quantity": 0, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 2 } ] } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" } ], "fulfillment_issues": [ { "fulfillment_issue_type": "OUT_OF_ITEM", "fulfillment_action_type": "REMOVE_ITEM", "root_item": { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 1, "items_available": 0 } }, { "fulfillment_issue_type": "PARTIAL_AVAILABILITY", "root_item": { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 2, "items_available": 1 } } ] }, "payment": { "charges": { "total": { "amount": 1399, "currency_code": "USD", "formatted_amount": "$13.99" }, "sub_total": { "amount": 650, "currency_code": "USD", "formatted_amount": "$6.50" }, "tax": { "amount": 52, "currency_code": "USD", "formatted_amount": "$0.52" }, "total_fee": { "amount": 697, "currency_code": "USD", "formatted_amount": "$6.97" } }, "accounting": { "taxRemittance": { "tax": { "uber": [ { "value": { "amount": 53, "currencyCode": "USD", "formattedAmount": "$0.53" } } ], "restaurant": null, "courier": null, "eater": null }, "totalFeeTax": null, "deliveryFeeTax": null, "smallOrderFeeTax": null } } }, "placed_at": placed_at, "estimated_ready_for_pickup_at": "2019-05-14T15:36:54-05:00", "type": "DELIVERY_BY_UBER", "brand": "UBER_EATS", "deliveries": [ { "id": "65d700da-1e9d-41a7-a304-d0fdcd12b2e4", "first_name": "Bruce", "vehicle": { "make": "Uber", "model": "Bicycle", "license_plate": "BICYCLE" }, "picture_url": "https://www.example.com/picture_url", "estimated_pickup_time": "2019-05-14T15:38:45-05:00", "current_state": "ARRIVED_AT_PICKUP" } ] }
    requests.post('http://localhost:5000/order', json=order, headers=token)
    #test
    response = requests.post("http://localhost:5000/orders/"+order_id+"/restaurantdelivery/status", json={"status": "delivered"}, headers=token)
    assert response.status_code == 409
    assert response.json() == {"error":"The order state is "+order["current_state"]+". It cannot be updated the delivery status."}

def test_update_delivery_status_with_incorrect_delivery_status(): # testing updating delivery status of an order using incorrect delivery status that is not "started" or "arriving" or "delivered" 
    #place an order
    order_id = str(uuid.uuid4())
    placed_at = datetime.now().isoformat()
    order = { "id": order_id, "display_id": "BC953", "external_reference_id": "Order-123", "current_state": "CREATED", "store": { "id": "c7f1dc2f-fabe-4997-845c-cad26fdcb894", "name": "Harry's Hamburgers", "external_reference_id": "HARRY_123" }, "eater": { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6ca78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" }, "eaters": [ { "id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78", "first_name": "Larry", "phone": "+1 555-555-5555", "phone_code": "555 55 555" } ], "cart": { "items": [ { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "price": { "unit_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "total_price": { "amount": 350, "currency_code": "USD", "formatted_amount": "$3.50" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Choose-flavor", "title": "Choose flavor", "external_data": "External data for muffin flavor choice", "selected_items": [ { "id": "Chocolate-deluxe", "title": "Chocolate deluxe", "external_data": "External data for chocolate deluxe flavor", "quantity": 1, "price": { "unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_unit_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" }, "base_total_price": { "amount": 50, "currency_code": "USD", "formatted_amount": "$0.50" } }, "default_quantity": 0 } ], "removed_items": null } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" }, { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "special_instructions": "make it iced please", "quantity": 1, "price": { "unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_unit_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" }, "base_total_price": { "amount": 300, "currency_code": "USD", "formatted_amount": "$3.00" } }, "selected_modifier_groups": [ { "id": "Add-milk", "title": "Add milk", "external_data": "External data for milk choice", "selected_items": [ { "id": "Milk", "title": "Milk", "external_data": "External data for milk", "quantity": 1, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 0 } ], "removed_items": null }, { "id": "Add-sugar", "title": "Add sugar", "external_data": "External data for sugar choice", "selected_items": null, "removed_items": [ { "id": "Sugar", "title": "Sugar", "external_data": "External data for sugar", "quantity": 0, "price": { "unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_unit_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" }, "base_total_price": { "amount": 0, "currency_code": "USD", "formatted_amount": "$0.00" } }, "default_quantity": 2 } ] } ], "eater_id": "63578c8b-9cd2-4c4f-91fc-315f575e6a78" } ], "fulfillment_issues": [ { "fulfillment_issue_type": "OUT_OF_ITEM", "fulfillment_action_type": "REMOVE_ITEM", "root_item": { "id": "Muffin", "instance_id": "Muffin-Instance", "title": "Fresh-baked muffin", "external_data": "External data for muffin", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 1, "items_available": 0 } }, { "fulfillment_issue_type": "PARTIAL_AVAILABILITY", "root_item": { "id": "Coffee", "instance_id": "CoffeeInstance", "title": "Coffee", "external_data": "External data for coffee", "quantity": 1, "fulfillment_action": { "fulfillment_action_type": "REMOVE_ITEM" } }, "item_availability_info": { "items_requested": 2, "items_available": 1 } } ] }, "payment": { "charges": { "total": { "amount": 1399, "currency_code": "USD", "formatted_amount": "$13.99" }, "sub_total": { "amount": 650, "currency_code": "USD", "formatted_amount": "$6.50" }, "tax": { "amount": 52, "currency_code": "USD", "formatted_amount": "$0.52" }, "total_fee": { "amount": 697, "currency_code": "USD", "formatted_amount": "$6.97" } }, "accounting": { "taxRemittance": { "tax": { "uber": [ { "value": { "amount": 53, "currencyCode": "USD", "formattedAmount": "$0.53" } } ], "restaurant": null, "courier": null, "eater": null }, "totalFeeTax": null, "deliveryFeeTax": null, "smallOrderFeeTax": null } } }, "placed_at": placed_at, "estimated_ready_for_pickup_at": "2019-05-14T15:36:54-05:00", "type": "DELIVERY_BY_UBER", "brand": "UBER_EATS", "deliveries": [ { "id": "65d700da-1e9d-41a7-a304-d0fdcd12b2e4", "first_name": "Bruce", "vehicle": { "make": "Uber", "model": "Bicycle", "license_plate": "BICYCLE" }, "picture_url": "https://www.example.com/picture_url", "estimated_pickup_time": "2019-05-14T15:38:45-05:00", "current_state": "ARRIVED_AT_PICKUP" } ] }
    requests.post('http://localhost:5000/order', json=order, headers=token)
    #accept order
    requests.post("http://localhost:5000/orders/"+order_id+"/accept_pos_order", json={"reason": "accepted"}, headers=token)
    #test
    delivery_status="reach"
    response = requests.post("http://localhost:5000/orders/"+order_id+"/restaurantdelivery/status", json={"status": delivery_status}, headers=token)
    assert response.status_code == 400
    assert response.json() == {"error":"The delivery status '"+delivery_status+"' is not accepted. Allowed values: started, arriving, delivered"}
